def if {A} (b : Bool) (t f : A) : A = elimBool (\_. A) t f b;
def Sum (A B : Type) : Type = (tag : Bool) ** if tag A B;
def Left {A B} (x : A) : Sum A B = (True, x);
def Right {A B} (x : B) : Sum A B = (False, x);
def caseSum {A B R} (x : Sum A B) (left : A -> R) (right : B -> R) : R =
  elimBool (\tag. if tag A B -> R) left right (x.tag) (x._2);

def NatF (R : Type) : Type = Sum R ();
def Nat = Fix NatF;
def Z : Nat = In {NatF} (Right []);
def S (n : Nat) : Nat = In {NatF} (Left n);
def cataNat {A} (n : Nat) (z : A) (s : A -> A) : A =
  elimFix {NatF} (\_. A) (\rec y. caseSum y (\m. s (rec m)) (\_. z)) n;
def add (a b : Nat) : Nat = cataNat a b S;

def prev (n : Nat) : Nat =
  elimFix {NatF} (\_. Nat) (\_ y. caseSum y (\m. m) (\_. Z)) n;
