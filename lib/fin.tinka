open #lib/sum;
open #lib/id;
open #lib/nat;

let FinF R n = Sum ((m : Nat) ** (proof : S m ~ n) ** ()) ((m : Nat) ** (pred : R m) ** (proof : S m ~ n) ** ());

let Fin = Fix FinF;
let FZ {n} : Fin (S n) = Roll {F = FinF} (Left [n, Refl]);
let FS {n} (pred : Fin n) : Fin (S n) = Roll {F = FinF} (Right [n, pred, Refl]);

let elimFin (P : {n} -> Fin n -> Type) (z : {n} -> P {S n} FZ) (s : {n} (pred : Fin n) -> P pred -> P (FS pred)) {n} (x : Fin n) : P x
  = elimFix {F = FinF} P (\ind sum. elimSum (\s. P (Roll {F = FinF} s))
    (\d. elimId (\p. P (Roll {F = FinF} (Left [d.m, p]))) (z {d.m}) d.proof)
    (\d. elimId (\p. P (Roll {F = FinF} (Right [d.m, d.pred, p]))) (s {d.m} d.pred (ind d.pred)) d.proof)
    sum) x;

let fin2nat {n} (f : Fin n) : Nat
  = elimFin (\_. Nat) 0 (\_ z. S z) f;

let nat2fin {n} : Fin (S n)
  = elimNat (\n. Fin (S n)) FZ (\_ m. FS m) n;

let weakenFin {n m} (f : Fin m) : Fin (m + n)
  = elimFin (\{k} _. Fin (k + n)) (\{k}. FZ {k + n}) (\{k} _ x. FS x) f;

export (Fin, FZ, FS, elimFin, fin2nat, nat2fin, weakenFin)
