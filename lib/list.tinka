import "lib/fix";

{-
data List A where
  Nil : List A
  Cons : A -> List A -> List A
-}
def ListF A R = Sum ((head : A) (tail : R) ** ()) ();
def List A = Fix (ListF A);

def Nil {A} : List A = In {ListF A} (Right []);
def Cons {A} (head : A) (tail : List A) : List A = In {ListF A} (Left [head, tail]);
def (::) = Cons;

def elimList
  {A}
  (P : List A -> Type)
  (nil : P Nil)
  (cons : (head : A) (tail : List A) -> P tail -> P (Cons head tail))
  (x : List A) : P x
  = elimFix {ListF A} P (\rec y. elimSum (\s. P (In {ListF A} s))
      (\data. cons data.head data.tail (rec data.tail)) (\_. nil) y) x;

def foldr {A R} (nil : R) (cons : A -> R -> R) (list : List A) : R
  = elimList (\_. R) nil (\hd _ tl. cons hd tl) list;

def map {A B} (fn : A -> B) (list : List A) : List B
  = foldr Nil (\hd tl. Cons (fn hd) tl) list;
def (<$>:) = map;

def append {A} (a b : List A) : List A = foldr b Cons a;
def (++) = append;
