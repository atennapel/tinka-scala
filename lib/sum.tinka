import "lib/bool";

def Sum (A B : Type) : Type = (tag : Bool) ** if tag A B;

def Left {A B} (x : A) : Sum A B = (True, x);
def Right {A B} (x : B) : Sum A B = (False, x);

def elimSum
  {A B}
  (P : Sum A B -> Type)
  (left : (x : A) -> P (Left x))
  (right : (x : B) -> P (Right x))
  (x : Sum A B) : P x
  = elimBool (\tag. (x : if tag A B) -> P (tag, x)) left right x.tag x._2;

def caseSum {A B R} (x : Sum A B) (left : A -> R) (right : B -> R) : R =
  elimSum (\_. R) left right x;
