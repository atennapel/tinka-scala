let Nat = (A : Type) -> A -> (A -> A) -> A;
let Z : Nat = \A z s. z;
let S (n : Nat) : Nat = \A z s. s (n A z s);
let foldNat {A} (n : Nat) (z : A) (s : A -> A) : A = n A z s;

let (+) (a b : Nat) : Nat = foldNat a b S;

export

{-
let exports :
  (Nat : Type) **
  (Z : Nat) **
  (S : Nat -> Nat) **
  (foldNat : {A : Type} -> Nat -> A -> (A -> A) -> A) **
  ((+) : Nat -> Nat -> Nat) **
  ()
  = [Nat, Z, S, foldNat, (+)];
exports
-}

{-
(Nat : Type) **
(S : '0 -> '0) **
()

-}