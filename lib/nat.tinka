let Nat = (A : Type) -> A -> (A -> A) -> A;
let Z : Nat = \A z s. z;
let S (n : Nat) : Nat = \A z s. s (n A z s);
let foldNat {A} (n : Nat) (z : A) (s : A -> A) : A = n A z s;

let (+) (a b : Nat) : Nat = foldNat a b S;

export
