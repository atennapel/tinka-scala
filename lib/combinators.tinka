def id {A} (x : A) : A = x;
def const {A B} (x : A) (y : B) : A = x;

def apply {A B} (f : A -> B) (x : A) : B = f x;
def (<|:) = apply;

def rapply {A B} (x : A) (f : A -> B) : B = f x;
def (|>) = rapply;

def compose {A B C} (f : B -> C) (g : A -> B) : A -> C = \x. f (g x);
def (<<) = compose;

def rcompose {A B C} (f : A -> B) (g : B -> C) : A -> C = \x. g (f x);
def (>>) = compose;

def flip {A B C} (f : A -> B -> C) : B -> A -> C = \x y. f y x;
def curry {A B C} (f : (A ** B) -> C) : A -> B -> C = \x y. f (x, y);
def uncurry {A B C} (f : A -> B -> C) : (A ** B) -> C = \p. f p._1 p._2;
