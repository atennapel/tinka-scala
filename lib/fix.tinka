import "lib/sum";

def Fix (F : Type -> Type) : Type = IFix {()} (\f _. F (f [])) [];
def In {F : Type -> Type} (x : F (Fix F)) : Fix F = IIn {()} {\f _. F (f [])} {[]} x;
def elimFix
  {F : Type -> Type}
  (P : Fix F -> Type)
  (alg : ((z : Fix F) -> P z) -> (y : F (Fix F)) -> P (In {F} y))
  (x : Fix F) : P x
  = elimIFix {()} {\f _. F (f [])} P (\rec y. alg rec y) x;
